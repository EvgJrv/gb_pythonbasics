# 1. Создать список и заполнить его элементами различных типов данных. 
# Реализовать скрипт проверки типа данных каждого элемента. 
# Использовать функцию type() для проверки типа. Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.

# https://external-preview.redd.it/srBx_swYIknfTRrPf5gqgE6R3qcNXqeK9LIFuEK9rVQ.jpg?auto=webp&s=f9da8f55a1a108f1fe37df92e52a6064f5ffb9b4
dream = [1, 0, 'beep', 'boop', 'it\'s a Bender\'s dream', 0, 1, 1, 1, 2, 1]
for i in dream:
    print(i)
    if type(i) == int and i not in (0,1):
        break

# 2. Для списка реализовать обмен значений соседних элементов, т.е. Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т.д. 
# При нечетном количестве элементов последний сохранить на своем месте. Для заполнения списка элементов необходимо использовать функцию input().

l = [1,2,3,4,5]
# input делать лень, он дурацкий на листах
for i in range(len(l)):
    if i % 2 == 1:
        l[i-1], l[i] = l[i], l[i-1]
print(l)

# 3. Пользователь вводит месяц в виде целого числа от 1 до 12. 
# Сообщить к какому времени года относится месяц (зима, весна, лето, осень). Напишите решения через list и через dict.
m = -1
spr, summ, aut, win = [3,4,5], [6,7,8], [9,10,11], [12,1,2]
if m in spr:
    print('List says:','Весна')
elif m in summ:
    print('List says:','Лето')
elif m in aut:
    print('List says:','Осень')
elif m in win:
    print('List says:','Зима')
else:
    print('List says:', 'Fuck you')

month_dict = {
    12:'Зима',
    1:'Зима',
    2:'Зима',
    3:'Весна',
    4:'Весна',
    5:'Весна',
    6:'Лето',
    7:'Лето',
    8:'Лето',
    9:'Осень',
    10:'Осень',
    11:'Осень'
}
if m > 0 and m <= 12:
    print('Dict says:', month_dict[m])
else:
    print('Dict says:', 'Fuck you')

# 4. Пользователь вводит строку из нескольких слов, разделённых пробелами. 
# Вывести каждое слово с новой строки. 
# Строки необходимо пронумеровать. Если в слово длинное, выводить только первые 10 букв в слове.

sting_input = input()
array_input = sting_input.strip().split(' ')
for i in array_input:
    print(array_input.index(i), i[:10])

# 5. Реализовать структуру «Рейтинг», представляющую собой не возрастающий набор натуральных чисел. 
# У пользователя необходимо запрашивать новый элемент рейтинга. 
# Если в рейтинге существуют элементы с одинаковыми значениями, то новый элемент с тем же значением должен разместиться после них.
rating = [7, 5, 3, 3, 2]
print(rating)
# new_rating = 3
new_rating = int(input())
rating.append(new_rating)
rating.sort(reverse=True)
print(rating)
