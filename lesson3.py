# 1. Реализовать функцию, принимающую два числа (позиционные аргументы) и выполняющую их деление. 
# Числа запрашивать у пользователя, предусмотреть обработку ситуации деления на ноль.

def my_div(a,b):
    try:
        return str(a/b)
    except:
        return 'go fuck yourselve'

print(my_div(int(input()),int(input())))


# 2. Реализовать функцию, принимающую несколько параметров, описывающих данные пользователя: имя, фамилия, год рождения, город проживания, email, телефон. 
# Функция должна принимать параметры как именованные аргументы. Реализовать вывод данных о пользователе одной строкой.

def userinfo(name, sex, email):
    '''я не помню, как там писать циклы по *args, **kwargs, поэтому в ленивом режиме'''
    return ' '.join([name,sex,email])
print(userinfo(name = 'Vasya', sex = 'yes', email='xXxNaGiBaToRxXx@mail.ru'))



# 3. Реализовать функцию my_func(), которая принимает три позиционных аргумента, и возвращает сумму наибольших двух аргументов.

a,b,c = 2,3,1

def my_func(a,b,c):
    q = [a,b,c]
    q.remove(min(q)) #kekus maximus
    return sum(q)

print(my_func(a,b,c))


# 4. Программа принимает действительное положительное число x и целое отрицательное число y. 
# Необходимо выполнить возведение числа x в степень y. Задание необходимо реализовать в виде функции my_func(x, y). 
# При решении задания необходимо обойтись без встроенной функции возведения числа в степень.

# Подсказка: попробуйте решить задачу двумя способами. Первый — возведение в степень с помощью оператора **. 
# Второй — более сложная реализация без оператора **, предусматривающая использование цикла.

x, y = 2, -2

def my_func(x, y):
    '''the third way'''
    if y<0:
        x,y = 1/x, -1*y
        return my_func(x,y)
    elif y == 1:
        return x
    else:
        x *= x
        y -= 1
        return my_func(x,y)

print(my_func(x,y))


# 5. Программа запрашивает у пользователя строку чисел, разделенных пробелом. 
# При нажатии Enter должна выводиться сумма чисел. Пользователь может продолжить ввод чисел, разделенных пробелом и снова нажать Enter. 
# Сумма вновь введенных чисел будет добавляться к уже подсчитанной сумме. Но если вместо числа вводится специальный символ, выполнение программы завершается. 
# Если специальный символ введен после нескольких чисел, то вначале нужно добавить сумму этих чисел к полученной ранее сумме и после этого завершить программу.

def recurse_hell(s=0):
    def sum_array(i):
        return sum(map(lambda x: int(x), i))

    i = input('\'s\' is a stop symbol \n').split()
    
    if 's' not in i:
        s += sum_array(i)
        print('current sum is', s)
        recurse_hell(s)
    else:
        i.remove('s')
        s += sum_array(i)
        print('current sum is', s)
        print('thats all')

recurse_hell()

# 6. Реализовать функцию int_func(), принимающую слово из маленьких латинских букв и возвращающую его же, но с прописной первой буквой. 
# Например, print(int_func(‘text’)) -> Text.

# Продолжить работу над заданием. В программу должна попадать строка из слов, разделенных пробелом. 
# Каждое слово состоит из латинских букв в нижнем регистре. Сделать вывод исходной строки, но каждое слово должно начинаться с заглавной буквы. 
# Необходимо использовать написанную ранее функцию int_func().

s = 'i love strings'
def int_func(s): return s.capitalize()
print(int_func(s))

def capitalize_all(s): return ' '.join(map(lambda x: int_func(x), s.split()))
print(capitalize_all(s))